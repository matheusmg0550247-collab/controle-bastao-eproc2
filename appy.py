import streamlit as st
import pandas as pd
import requests
import time
import json
import os
from datetime import datetime, timedelta
from operator import itemgetter
from streamlit_autorefresh import st_autorefresh

# --- 1. Defini√ß√µes Globais ---
GOOGLE_CHAT_WEBHOOK_RELATORIO = ""
CHAT_WEBHOOK_BASTAO = ""
BASTAO_EMOJI = "üå∏"
APP_URL_CLOUD = 'https://controle-bastao-cesupe.streamlit.app'
CONSULTORES = sorted([
    "Barbara", "Bruno", "Claudia", "Douglas", "F√°bio", "Glayce", "Isac",
    "Isabela", "Ivana", "Leonardo", "Mor√¥ni", "Michael", "Pablo", "Ranyer",
    "Victoria"
])
LOG_FILE = 'status_log.json'
STATE_FILE = 'app_state.json'
STATUS_SAIDA_PRIORIDADE = ['Sa√≠da Tempor√°ria']
STATUSES_DE_SAIDA = ['Atividade', 'Almo√ßo', 'Sa√≠da Tempor√°ria']
GIF_URL_WARNING = 'https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2pjMDN0NGlvdXp1aHZ1ejJqMnY5MG1yZmN0d3NqcDl1bTU1dDJrciZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/fXnRObM8Q0RkOmR5nf/giphy.gif'
GIF_URL_ROTATION = 'https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmx4azVxbGt4Mnk1cjMzZm5sMmp1YThteGJsMzcyYmhsdmFoczV0aSZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/JpkZEKWY0s9QI4DGvF/giphy.gif'
SOUND_URL = "https://github.com/matheusmg0550247-collab/controle-bastao-eproc2/raw/refs/heads/main/doorbell-223669.mp3"

# --- 2. Fun√ß√£o Geradora do C√≥digo ---
def generate_app_code(emoji, webhook_relatorio, webhook_bastao, public_url):
    consultores_list_str = str(CONSULTORES)

    app_code_lines = [
        "import streamlit as st",
        "import pandas as pd",
        "import requests",
        "import time",
        "import json",
        "import os",
        "from datetime import datetime, timedelta",
        "from operator import itemgetter",
        "from streamlit_autorefresh import st_autorefresh",
        "",
        f"CONSULTORES = {consultores_list_str}",
        f"BASTAO_EMOJI = '{emoji}'",
        f"WEBHOOK_RELATORIO = '{webhook_relatorio}'",
        f"WEBHOOK_BASTAO = '{webhook_bastao}'",
        f"APP_URL = '{public_url}'",
        "LOG_FILE = 'status_log.json'",
        "STATE_FILE = 'app_state.json'",
        "STATUS_SAIDA_PRIORIDADE = ['Sa√≠da Tempor√°ria']",
        "STATUSES_DE_SAIDA = ['Atividade', 'Almo√ßo', 'Sa√≠da Tempor√°ria']",
        f"GIF_URL_WARNING = '{GIF_URL_WARNING}'",
        f"GIF_URL_ROTATION = '{GIF_URL_ROTATION}'",
        f"SOUND_URL = '{SOUND_URL}'",
        "",
        "# --- Fun√ß√µes de Persist√™ncia ---",
        "def date_serializer(obj):",
        "    if isinstance(obj, datetime): return obj.isoformat()",
        "    return str(obj)",
        "",
        "def save_state():",
        "    state_to_save = {",
        "        'status_texto': st.session_state.status_texto,",
        "        'bastao_queue': st.session_state.bastao_queue,",
        "        'skip_flags': st.session_state.skip_flags,", # Salva flags de pular
        "        'bastao_start_time': st.session_state.bastao_start_time,",
        "        'current_status_starts': st.session_state.current_status_starts,",
        "        'report_last_run_date': st.session_state.report_last_run_date,",
        "        'bastao_counts': st.session_state.bastao_counts,",
        "        'priority_return_queue': st.session_state.priority_return_queue,",
        "        'rotation_gif_start_time': st.session_state.get('rotation_gif_start_time'),",
        "    }",
        "    try:",
        "        with open(STATE_FILE, 'w') as f: json.dump(state_to_save, f, indent=4, default=date_serializer)",
        "        print(f'*** Estado Salvo ***')",
        "    except Exception as e: print(f'Erro ao salvar estado: {e}')",
        "",
        "def load_state():",
        "    if not os.path.exists(STATE_FILE): return {}",
        "    try:",
        "        with open(STATE_FILE, 'r') as f: data = json.load(f)",
        "        for key in ['bastao_start_time', 'report_last_run_date', 'rotation_gif_start_time']:",
        "            if data.get(key) and isinstance(data[key], str):",
        "                try: data[key] = datetime.fromisoformat(data[key])",
        "                except ValueError: data[key] = None",
        "        if 'current_status_starts' in data and isinstance(data['current_status_starts'], dict):",
        "             temp_starts = {}",
        "             for c, ts in data['current_status_starts'].items():",
        "                 if c in CONSULTORES:",
        "                     if ts and isinstance(ts, str):",
        "                         try: temp_starts[c] = datetime.fromisoformat(ts)",
        "                         except ValueError: temp_starts[c] = datetime.now()",
        "                     elif isinstance(ts, datetime): temp_starts[c] = ts",
        "                     else: temp_starts[c] = datetime.now()",
        "             data['current_status_starts'] = temp_starts",
        "        else: data['current_status_starts'] = {}",
        "        data['bastao_queue'] = [c for c in data.get('bastao_queue', []) if c in CONSULTORES]",
        "        data.setdefault('status_texto', {})",
        "        data.setdefault('bastao_counts', {})",
        "        data.setdefault('priority_return_queue', [])",
        "        data.setdefault('skip_flags', {}) # Carrega flags de pular",
        "        return data",
        "    except Exception as e: print(f'Erro ao carregar estado: {e}. Resetando.'); return {}",
        "",
        "# --- Fun√ß√µes Auxiliares ---",
        "def send_chat_notification_internal(c, s): pass",
        "def play_sound_html(): return f'<audio autoplay=\"true\"><source src=\"{SOUND_URL}\" type=\"audio/mpeg\"></audio>'",
        "def load_logs(): return []",
        "def save_logs(l): pass",
        "",
        "def log_status_change(consultor, old_status, new_status, duration):",
        "    print(f'LOG: {consultor} de \"{old_status or '-'}\" para \"{new_status or '-'}\" ap√≥s {duration}')",
        "    if not isinstance(duration, timedelta): duration = timedelta(0)",
        "    st.session_state.current_status_starts[consultor] = datetime.now()",
        "",
        "def format_time_duration(duration):",
        "    if not isinstance(duration, timedelta): return '--:--:--'",
        "    s = int(duration.total_seconds()); h, s = divmod(s, 3600); m, s = divmod(s, 60)",
        "    return f'{h:02}:{m:02}:{s:02}'",
        "",
        "def send_daily_report(): pass",
        "",
        "# --- Inicializa√ß√£o ---",
        "def init_session_state():",
        "    persisted_state = load_state()",
        "    defaults = {",
        "        'status_texto': {nome: '' for nome in CONSULTORES}, 'bastao_queue': [],",
        "        'skip_flags': {}, # Inicializa flags de pular",
        "        'bastao_start_time': None, 'current_status_starts': {nome: datetime.now() for nome in CONSULTORES},",
        "        'report_last_run_date': datetime.min, 'bastao_counts': {nome: 0 for nome in CONSULTORES},",
        "        'priority_return_queue': [], 'rotation_gif_start_time': None,",
        "    }",
        "    for key, default in defaults.items():",
        "        st.session_state.setdefault(key, persisted_state.get(key, default))",
        "        # Type safety",
        "        if key == 'bastao_queue' and not isinstance(st.session_state.bastao_queue, list): st.session_state.bastao_queue = []",
        "        if key == 'skip_flags' and not isinstance(st.session_state.skip_flags, dict): st.session_state.skip_flags = {}",
        "",
        "    loaded_starts = persisted_state.get('current_status_starts', {})",
        "    for nome in CONSULTORES:",
        "        st.session_state.current_status_starts.setdefault(nome, loaded_starts.get(nome, datetime.now()))",
        "",
        "    # Limpa fila e flags de consultores inv√°lidos",
        "    st.session_state.bastao_queue = [c for c in st.session_state.bastao_queue if c in CONSULTORES]",
        "    st.session_state.skip_flags = {c: v for c, v in st.session_state.skip_flags.items() if c in CONSULTORES}",
        "",
        "    # Alinha checkboxes",
        "    active_people = set(st.session_state.bastao_queue)",
        "    for nome in CONSULTORES:",
        "        is_active = nome in active_people or bool(st.session_state.status_texto.get(nome))",
        "        st.session_state.setdefault(f'check_{nome}', is_active)",
        "",
        "    # Se fila vazia mas deveria ter gente, reconstruir",
        "    checked_on = {c for c in CONSULTORES if st.session_state.get(f'check_{c}')}",
        "    if not st.session_state.bastao_queue and checked_on:",
        "        print('!!! Fila vazia na carga, reconstruindo !!!')",
        "        # Simplesmente adiciona todos os checados no fim (a ordem se ajustar√°)",
        "        st.session_state.bastao_queue = [c for c in CONSULTORES if c in checked_on] # Usa ordem alfab√©tica inicial",
        "",
        "    print('--- Estado Inicializado ---')",
        "    print(f' Fila: {st.session_state.bastao_queue}, Skip Flags: {st.session_state.skip_flags}')",
        "",
        "# --- L√≥gica de Bast√£o Simplificada ---",
        "def find_next_holder_index(current_index, queue, skips):",
        "    if not queue: return -1",
        "    num_consultores = len(queue)",
        "    next_idx = (current_index + 1) % num_consultores",
        "    attempts = 0",
        "    while attempts < num_consultores:",
        "        consultor = queue[next_idx]",
        "        if not skips.get(consultor, False) and st.session_state.get(f'check_{consultor}'):",
        "            return next_idx # Achou o pr√≥ximo v√°lido",
        "        next_idx = (next_idx + 1) % num_consultores",
        "        attempts += 1",
        "    return -1 # N√£o achou ningu√©m eleg√≠vel",
        "",
        "def check_and_assume_baton():",
        "    print('--- CHECK ASSUME BAST√ÉO ---')",
        "    queue = st.session_state.bastao_queue",
        "    skips = st.session_state.skip_flags",
        "    current_holder_status = next((c for c, s in st.session_state.status_texto.items() if s == 'Bast√£o'), None)",
        "",
        "    # 1. Verifica se o portador atual ainda √© v√°lido",
        "    is_current_valid = (current_holder_status",
        "                      and current_holder_status in queue",
        "                      and st.session_state.get(f'check_{current_holder_status}'))",
        "",
        "    # 2. Se n√£o h√° portador ou o atual √© inv√°lido, encontra o primeiro eleg√≠vel",
        "    next_holder = None",
        "    if not is_current_valid:",
        "        print('Portador atual inv√°lido ou inexistente. Procurando o primeiro eleg√≠vel...')",
        "        first_eligible_index = find_next_holder_index(-1, queue, skips) # Come√ßa busca do in√≠cio",
        "        if first_eligible_index != -1:",
        "            next_holder = queue[first_eligible_index]",
        "            # Consome o skip flag se ele assumir assim",
        "            if skips.get(next_holder):",
        "                 print(f' Consumindo skip flag de {next_holder} ao assumir.')",
        "                 st.session_state.skip_flags[next_holder] = False",
        "    else:",
        "        # Portador atual √© v√°lido, mant√©m ele",
        "        print(f'Portador atual ({current_holder_status}) √© v√°lido.')",
        "        next_holder = current_holder_status",
        "",
        "    print(f'Fila: {queue}, Skips: {skips}, Pr√≥ximo Definido: {next_holder}, Portador Atual (Status): {current_holder_status}')",
        "",
        "    # 3. Atualiza os status se necess√°rio",
        "    changed = False",
        "    if next_holder != current_holder_status:", # Se houve mudan√ßa
        "        # Limpa o antigo (se existia)",
        "        if current_holder_status:",
        "            print(f'Limpando bast√£o de {current_holder_status}')",
        "            duration = datetime.now() - st.session_state.current_status_starts.get(current_holder_status, datetime.now())",
        "            log_status_change(current_holder_status, 'Bast√£o', '', duration)",
        "            st.session_state.status_texto[current_holder_status] = ''",
        "            changed = True",
        "        # Define o novo (se existe)",
        "        if next_holder:",
        "            print(f'Atribuindo bast√£o para {next_holder}')",
        "            old_status = st.session_state.status_texto.get(next_holder, '')",
        "            duration = datetime.now() - st.session_state.current_status_starts.get(next_holder, datetime.now())",
        "            log_status_change(next_holder, old_status, 'Bast√£o', duration)",
        "            st.session_state.status_texto[next_holder] = 'Bast√£o'",
        "            st.session_state.bastao_start_time = datetime.now()",
        "            st.session_state.play_sound = True # Toca som na mudan√ßa",
        "            changed = True",
        "        else: # Ningu√©m eleg√≠vel",
        "             if st.session_state.bastao_start_time is not None: changed = True",
        "             st.session_state.bastao_start_time = None",
        "",
        "    if changed: save_state()",
        "    return changed",
        "",
        "# --- Callbacks ---",
        "def update_queue(consultor):",
        "    print(f'UPDATE QUEUE: {consultor}')",
        "    st.session_state.gif_warning = False; st.session_state.rotation_gif_start_time = None",
        "    is_checked = st.session_state.get(f'check_{consultor}') # New state",
        "    old_status_text = st.session_state.status_texto.get(consultor, '')",
        "    was_holder = consultor == next((c for c, s in st.session_state.status_texto.items() if s == 'Bast√£o'), None)",
        "    duration = datetime.now() - st.session_state.current_status_starts.get(consultor, datetime.now())",
        "",
        "    # Atualiza a fila ANTES de logar/checar bast√£o",
        "    if is_checked:",
        "        if consultor not in st.session_state.bastao_queue:",
        "             st.session_state.bastao_queue.append(consultor) # Adiciona ao fim",
        "        st.session_state.skip_flags[consultor] = False # Garante que n√£o est√° pulando",
        "        st.session_state.status_texto[consultor] = '' # Limpa status espec√≠fico",
        "        log_status_change(consultor, old_status_text or 'Indispon√≠vel', '', duration)",
        "    else:",
        "        if consultor in st.session_state.bastao_queue:",
        "             st.session_state.bastao_queue.remove(consultor)",
        "        st.session_state.skip_flags.pop(consultor, None) # Remove flag ao sair",
        "        st.session_state.status_texto[consultor] = '' # Limpa status espec√≠fico",
        "        log_status_change(consultor, old_status_text or ('Bast√£o' if was_holder else 'Dispon√≠vel'), 'Indispon√≠vel', duration)",
        "",
        "    print(f'... Fila: {st.session_state.bastao_queue}, Skips: {st.session_state.skip_flags}')",
        "    baton_changed = check_and_assume_baton()",
        "    if not baton_changed: save_state() # Salva se check_assume n√£o salvou",
        "    st.rerun()",
        "",
        "def rotate_bastao(): # A√ß√£o 'Passar'",
        "    print('ROTATE BASTAO')",
        "    selected = st.session_state.consultor_selectbox",
        "    st.session_state.gif_warning = False; st.session_state.rotation_gif_start_time = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione.'); return",
        "    queue = st.session_state.bastao_queue",
        "    skips = st.session_state.skip_flags",
        "    current_holder = next((c for c, s in st.session_state.status_texto.items() if s == 'Bast√£o'), None)",
        "    if selected != current_holder: st.session_state.gif_warning = True; st.rerun(); return",
        "",
        "    try: current_index = queue.index(current_holder)",
        "    except ValueError: print('ERRO: Portador n√£o est√° na fila?'); return",
        "",
        "    next_index = find_next_holder_index(current_index, queue, skips)",
        "",
        "    if next_index != -1:",
        "        next_holder = queue[next_index]",
        "        print(f'Passando bast√£o de {current_holder} para {next_holder}')",
        "        duration = datetime.now() - (st.session_state.bastao_start_time or datetime.now())",
        "        log_status_change(current_holder, 'Bast√£o', '', duration)",
        "        st.session_state.status_texto[current_holder] = ''",
        "        log_status_change(next_holder, st.session_state.status_texto.get(next_holder, ''), 'Bast√£o', timedelta(0))",
        "        st.session_state.status_texto[next_holder] = 'Bast√£o'",
        "        st.session_state.bastao_start_time = datetime.now()",
        "        st.session_state.skip_flags[next_holder] = False # Consome o flag",
        "        st.session_state.bastao_counts[current_holder] = st.session_state.bastao_counts.get(current_holder, 0) + 1",
        "        st.session_state.play_sound = True",
        "        st.session_state.rotation_gif_start_time = datetime.now()",
        "        save_state()",
        "    else:",
        "        print('N√£o foi encontrado pr√≥ximo eleg√≠vel. Bast√£o permanece.')",
        "        st.warning('N√£o h√° pr√≥ximo consultor eleg√≠vel na fila.')",
        "",
        "    st.rerun()",
        "",
        "def toggle_skip(): # A√ß√£o 'Pular'",
        "    print('TOGGLE SKIP')",
        "    selected = st.session_state.consultor_selectbox",
        "    st.session_state.gif_warning = False; st.session_state.rotation_gif_start_time = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione.'); return",
        "    if selected not in st.session_state.bastao_queue: st.warning(f'{selected} n√£o est√° na fila.'); return",
        "",
        "    current_skip_status = st.session_state.skip_flags.get(selected, False)",
        "    st.session_state.skip_flags[selected] = not current_skip_status",
        "    new_status_str = 'MARCADO para pular' if not current_skip_status else 'DESMARCADO para pular'",
        "    print(f'{selected} foi {new_status_str}')",
        "",
        "    # Se o portador atual se marcou para pular, tenta passar o bast√£o imediatamente",
        "    current_holder = next((c for c, s in st.session_state.status_texto.items() if s == 'Bast√£o'), None)",
        "    if selected == current_holder and st.session_state.skip_flags[selected]:",
        "        print(f'Portador {selected} se marcou para pular. Tentando passar o bast√£o...')",
        "        rotate_bastao() # Chama a fun√ß√£o de passar",
        "        return # Rerun j√° acontece dentro de rotate_bastao",
        "",
        "    save_state()",
        "    st.rerun()",
        "",
        "def update_status(status_text, change_to_available): # Indispon√≠vel + Status",
        "    print(f'UPDATE STATUS: {status_text}')",
        "    selected = st.session_state.consultor_selectbox",
        "    st.session_state.gif_warning = False; st.session_state.rotation_gif_start_time = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione.'); return",
        "",
        "    st.session_state[f'check_{selected}'] = False # Indispon√≠vel",
        "    was_holder = next((True for c, s in st.session_state.status_texto.items() if s == 'Bast√£o' and c == selected), False)",
        "    old_status = st.session_state.status_texto.get(selected, '') or ('Bast√£o' if was_holder else 'Dispon√≠vel')",
        "    duration = datetime.now() - st.session_state.current_status_starts.get(selected, datetime.now())",
        "    log_status_change(selected, old_status, status_text, duration)",
        "    st.session_state.status_texto[selected] = status_text",
        "",
        "    if selected in st.session_state.bastao_queue: st.session_state.bastao_queue.remove(selected)",
        "    st.session_state.skip_flags.pop(selected, None)",
        "",
        "    if status_text == 'Sa√≠da Tempor√°ria':",
        "        if selected not in st.session_state.priority_return_queue: st.session_state.priority_return_queue.append(selected)",
        "    elif selected in st.session_state.priority_return_queue: st.session_state.priority_return_queue.remove(selected)",
        "",
        "    print(f'... Fila: {st.session_state.bastao_queue}, Skips: {st.session_state.skip_flags}')",
        "    baton_changed = False",
        "    if was_holder:", # Se o portador saiu, precisa achar o pr√≥ximo",
        "        baton_changed = check_and_assume_baton()",
        "    if not baton_changed: save_state()",
        "    st.rerun()",
        "",
        "def manual_rerun():",
        "    print('MANUAL RERUN')",
        "    st.session_state.gif_warning = False; st.session_state.rotation_gif_start_time = None",
        "    st.rerun()",
        "",
        "# --- Execu√ß√£o Principal ---",
        'st.set_page_config(page_title="Controle Bast√£o Cesupe", layout="wide")',
        "st.markdown('<style>div.stAlert { display: none !important; }</style>', unsafe_allow_html=True)",
        "init_session_state()",
        "",
        "st.title(f'Controle Bast√£o Cesupe {BASTAO_EMOJI}')",
        'st.markdown("<hr style=\\"border: 1px solid #E75480;\\">", unsafe_allow_html=True)',
        "",
        "# Auto Refresh & Timed Elements",
        "gif_start_time = st.session_state.get('rotation_gif_start_time')",
        "show_gif = False; refresh_interval = 30000",
        "if gif_start_time:",
        "    try:",
        "        elapsed = (datetime.now() - gif_start_time).total_seconds()",
        "        if elapsed < 20: show_gif = True; refresh_interval = 5000",
        "        else: st.session_state.rotation_gif_start_time = None",
        "    except: st.session_state.rotation_gif_start_time = None",
        "st_autorefresh(interval=refresh_interval, key='auto_rerun_key')",
        "if st.session_state.get('play_sound', False):",
        "    st.components.v1.html(play_sound_html(), height=0, width=0); st.session_state.play_sound = False",
        "if show_gif: st.image(GIF_URL_ROTATION, width=200, caption='Bast√£o Passado!')",
        "if st.session_state.get('gif_warning', False):",
        "    st.error('üö´ A√ß√£o inv√°lida! Apenas o portador atual pode usar üéØ Bast√£o.'); st.image(GIF_URL_WARNING, width=150)",
        "",
        "# Garantir Assun√ß√£o Inicial",
        "holder_exists = any(s == 'Bast√£o' for s in st.session_state.status_texto.values())",
        "if not holder_exists and st.session_state.bastao_queue:",
        "    print('!!! FOR√áANDO CHECK ASSUME BAST√ÉO NO RENDER !!!')",
        "    if not st.session_state.get('_assign_attempt', False):",
        "        st.session_state._assign_attempt = True",
        "        if check_and_assume_baton(): st.rerun()",
        "    else: print('WARN: Segunda tentativa evitada.')",
        "if '_assign_attempt' in st.session_state: del st.session_state['_assign_attempt']",
        "",
        "# Layout",
        'col_principal, col_disponibilidade = st.columns([1.5, 1])',
        "queue = st.session_state.bastao_queue",
        "skips = st.session_state.skip_flags",
        "responsavel = next((c for c, s in st.session_state.status_texto.items() if s == 'Bast√£o'), None)",
        "current_index = queue.index(responsavel) if responsavel in queue else -1",
        "proximo_index = find_next_holder_index(current_index, queue, skips)",
        "proximo = queue[proximo_index] if proximo_index != -1 else None",
        "# Calcula restante: da posi√ß√£o *depois* do pr√≥ximo at√© o fim, mais do in√≠cio at√© o pr√≥ximo, pulando os skippados",
        "restante = []",
        "if proximo_index != -1:",
        "    num_q = len(queue)",
        "    start_check = (proximo_index + 1) % num_q",
        "    idx = start_check",
        "    count = 0",
        "    while count < num_q:",
        "        if idx != current_index and idx != proximo_index:", # N√£o mostra o atual nem o pr√≥ximo na lista de 'restante'
        "             consultor = queue[idx]",
        "             if not skips.get(consultor, False) and st.session_state.get(f'check_{consultor}'):",
        "                 restante.append(consultor)",
        "        idx = (idx + 1) % num_q",
        "        count += 1",
        "        if idx == start_check: break # Evita loop infinito se todos forem skipped",
        "",
        "with col_principal:",
        '    st.header("Respons√°vel pelo Bast√£o")',
        "    _, col_time = st.columns([0.25, 0.75])",
        "    duration = timedelta()",
        "    if responsavel and st.session_state.bastao_start_time:",
        "        try: duration = datetime.now() - st.session_state.bastao_start_time",
        "        except: pass",
        "    col_time.markdown(f'#### üïí Tempo: **{format_time_duration(duration)}**')",
        "    if responsavel:",
        "        st.markdown(f'<span style=\"background-color: #E75480; color: white; padding: 5px 10px; border-radius: 5px; font-size: 2em; font-weight: bold;\">üî• {responsavel}</span>', unsafe_allow_html=True)",
        "    else: st.markdown('## (Ningu√©m com o bast√£o)')",
        '    st.markdown("###")',
        '    st.header("Pr√≥ximos da Fila")',
        "    if proximo: st.markdown(f'### 1¬∫: **{proximo}**')",
        "    if restante: st.markdown(f'#### 2¬∫ em diante: {', '.join(restante)}')",
        "    if not proximo and not restante:",
        "         if responsavel: st.markdown('*Apenas o respons√°vel atual √© eleg√≠vel.*')",
        "         else: st.markdown('*Ningu√©m eleg√≠vel na fila.*')",
        "    elif not restante and proximo: st.markdown(\" \")",
        '    st.markdown("###")',
        '    st.header("**Consultor**")',
        "    st.selectbox('Selecione:', options=['Selecione um nome'] + CONSULTORES, key='consultor_selectbox', label_visibility='collapsed')",
        '    st.markdown("#### "); st.markdown("**A√ß√µes:**")',
        '    c1, c2, c3, c4, c5 = st.columns(5)',
        "    c1.button('üéØ Passar', on_click=rotate_bastao, use_container_width=True, help='Passa o bast√£o para o pr√≥ximo eleg√≠vel. Apenas o respons√°vel atual.')",
        "    c2.button('‚è≠Ô∏è Pular', on_click=toggle_skip, use_container_width=True, help='Marca/Desmarca o consultor selecionado para ser pulado na pr√≥xima rota√ß√£o.')", # Mudou a a√ß√£o
        "    c3.button('‚úèÔ∏è Atividade', on_click=update_status, args=('Atividade', False,), use_container_width=True)",
        "    c4.button('üçΩÔ∏è Almo√ßo', on_click=update_status, args=('Almo√ßo', False,), use_container_width=True)",
        "    c5.button('üö∂ Sa√≠da', on_click=update_status, args=('Sa√≠da Tempor√°ria', False,), use_container_width=True)",
        '    st.markdown("####")',
        "    st.button('üîÑ Atualizar (Manual)', on_click=manual_rerun, use_container_width=True)",
        '    st.markdown("---")',
        "",
        "with col_disponibilidade:",
        "    st.header('Status dos Consultores')",
        "    st.markdown('Marque/Desmarque para entrar/sair.')",
        "    ui_lists = {'fila': [], 'atividade': [], 'almoco': [], 'saida': [], 'indisponivel': []}",
        "    for nome in CONSULTORES:",
        "        is_checked = st.session_state.get(f'check_{nome}', False)",
        "        status = st.session_state.status_texto.get(nome, '')",
        "        if is_checked: ui_lists['fila'].append(nome)",
        "        elif status == 'Atividade': ui_lists['atividade'].append(nome)",
        "        elif status == 'Almo√ßo': ui_lists['almoco'].append(nome)",
        "        elif status == 'Sa√≠da Tempor√°ria': ui_lists['saida'].append(nome)",
        "        else: ui_lists['indisponivel'].append(nome)",
        "",
        "    st.subheader(f'‚úÖ Na Fila ({len(ui_lists['fila'])})')",
        "    # Mostra a fila na ordem atual dela",
        "    render_order = [c for c in queue if c in ui_lists['fila']] + [c for c in ui_lists['fila'] if c not in queue]", # Mant√©m ordem da fila + novos
        "    if not render_order: st.markdown('_Ningu√©m dispon√≠vel._')",
        "    else:",
        "        for nome in render_order:",
        "            col_nome, col_check = st.columns([0.8, 0.2])",
        "            key = f'check_{nome}'",
        "            col_check.checkbox(' ', key=key, on_change=update_queue, args=(nome,), label_visibility='collapsed')",
        "            skip_flag = skips.get(nome, False)",
        "            if nome == responsavel:",
        "                display = f'<span style=\"background-color: #E75480; color: white; padding: 2px 6px; border-radius: 5px; font-weight: bold;\">üî• {nome}</span>'",
        "            elif skip_flag:",
        "                display = f'**{nome}** :orange-background[Pulando ‚è≠Ô∏è]'", # Indica que ser√° pulado
        "            else:",
        "                 display = f'**{nome}** :blue-background[Aguardando]'",
        "            col_nome.markdown(display, unsafe_allow_html=True)",
        "    st.markdown('---')",
        "",
        "    def render_section(title, icon, names, tag_color):",
        "        st.subheader(f'{icon} {title} ({len(names)})')",
        "        if not names: st.markdown(f'_Ningu√©m em {title.lower()}._')",
        "        else:",
        "            for nome in sorted(names):",
        "                col_nome, col_check = st.columns([0.8, 0.2])",
        "                key = f'check_{nome}'",
        "                col_check.checkbox(' ', key=key, on_change=update_queue, args=(nome,), label_visibility='collapsed')",
        "                col_nome.markdown(f'**{nome}** :{tag_color}-background[{title}]', unsafe_allow_html=True)",
        "        st.markdown('---')",
        "    render_section('Atividade', '‚úèÔ∏è', ui_lists['atividade'], 'yellow')",
        "    render_section('Almo√ßo', 'üçΩÔ∏è', ui_lists['almoco'], 'blue')",
        "    render_section('Sa√≠da', 'üö∂', ui_lists['saida'], 'red')",
        "    render_section('Indispon√≠vel', '‚ùå', ui_lists['indisponivel'], 'grey')",
        "",
        "    # Daily report check...",
        "",
        "print('--- FIM DO RENDER ---')",
    ]
    return "\\n".join(line for line in app_code_lines if line.strip()) + "\\n"


# ============================================
# 5. EXECU√á√ÉO FINAL
# ============================================
app_code_to_exec = generate_app_code(
     BASTAO_EMOJI, GOOGLE_CHAT_WEBHOOK_RELATORIO, CHAT_WEBHOOK_BASTAO, APP_URL_CLOUD
)
exec(app_code_to_exec)
