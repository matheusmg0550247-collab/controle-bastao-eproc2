import streamlit as st
import pandas as pd
import requests
import time
import json
import os
from datetime import datetime, timedelta
from operator import itemgetter
from streamlit_autorefresh import st_autorefresh

# --- 2. Defini√ß√£o das Vari√°veis Globais ---
GOOGLE_CHAT_WEBHOOK_RELATORIO = ""
CHAT_WEBHOOK_BASTAO = ""
BASTAO_EMOJI = "üå∏"
APP_URL_CLOUD = 'https://controle-bastao-cesupe.streamlit.app'
CONSULTORES = sorted([
    "Barbara", "Bruno", "Claudia", "Douglas", "F√°bio", "Glayce", "Isac",
    "Isabela", "Ivana", "Leonardo", "Mor√¥ni", "Michael", "Pablo", "Ranyer",
    "Victoria"
])

# --- 4. C√ìDIGO DO APP STREAMLIT (app.py) ---
def generate_app_code(consultores, emoji, webhook_relatorio, webhook_bastao, public_url):
    warning_gif_url = 'https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2pjMDN0NGlvdXp1aHZ1ejJqMnY5MG1yZmN0d3NqcDl1bTU1dDJrciZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/fXnRObM8Q0RkOmR5nf/giphy.gif'
    rotation_gif_url = 'https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmx4azVxbGt4Mnk1cjMzZm5sMmp1YThteGJsMzcyYmhsdmFoczV0aSZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/JpkZEKWY0s9QI4DGvF/giphy.gif'
    sound_url = "https://github.com/matheusmg0550247-collab/controle-bastao-eproc2/raw/refs/heads/main/doorbell-223669.mp3"

    app_code_lines = [
        "import streamlit as st",
        "import pandas as pd",
        "import requests",
        "import time",
        "import json",
        "import os",
        "from datetime import datetime, timedelta",
        "from operator import itemgetter",
        "from streamlit_autorefresh import st_autorefresh",
        "",
        f"BASTAO_EMOJI = '{emoji}'",
        f"CONSULTORES = {consultores}",
        f"WEBHOOK_RELATORIO = '{webhook_relatorio}'",
        f"WEBHOOK_BASTAO = '{webhook_bastao}'",
        f"APP_URL = '{public_url}'",
        "TIMER_RERUN_S = 30",
        "LOG_FILE = 'status_log.json'",
        "STATE_FILE = 'app_state.json'",
        "STATUS_SAIDA_PRIORIDADE = ['Sa√≠da Tempor√°ria']",
        "STATUSES_DE_SAIDA = ['Atividade', 'Almo√ßo', 'Sa√≠da Tempor√°ria']",
        f"GIF_URL_WARNING = '{warning_gif_url}'",
        f"GIF_URL_ROTATION = '{rotation_gif_url}'",
        f"SOUND_URL = '{sound_url}'",
        "",
        "# --- Fun√ß√µes de Persist√™ncia de Estado ---",
        "",
        "def date_serializer(obj):",
        "    if isinstance(obj, datetime): return obj.isoformat()",
        "    return str(obj)",
        "",
        "def save_state():",
        "    # ... (fun√ß√£o save_state como antes) ...",
        "    state_to_save = {",
        "        'status_texto': st.session_state.status_texto,",
        "        'bastao_queue': st.session_state.bastao_queue,",
        "        'bastao_start_time': st.session_state.bastao_start_time,",
        "        'current_status_starts': st.session_state.current_status_starts,",
        "        'report_last_run_date': st.session_state.report_last_run_date,",
        "        'bastao_counts': st.session_state.bastao_counts,",
        "        'priority_return_queue': st.session_state.priority_return_queue,",
        "        'rotation_gif_start_time': st.session_state.get('rotation_gif_start_time'),",
        "        'master_order': st.session_state.master_order,",
        "    }",
        "    try:",
        "        with open(STATE_FILE, 'w') as f: json.dump(state_to_save, f, indent=4, default=date_serializer)",
        "    except Exception as e: print(f'Erro ao salvar estado: {e}')",
        "",
        "def load_state():",
        "    # ... (fun√ß√£o load_state como antes) ...",
        "    if not os.path.exists(STATE_FILE): return {}",
        "    try:",
        "        with open(STATE_FILE, 'r') as f: data = json.load(f)",
        "        for key in ['bastao_start_time', 'report_last_run_date', 'rotation_gif_start_time']:",
        "            if data.get(key) and isinstance(data[key], str):",
        "                try: data[key] = datetime.fromisoformat(data[key])",
        "                except ValueError: data[key] = None",
        "        if 'current_status_starts' in data:",
        "            temp_starts = {}",
        "            for c, ts in data['current_status_starts'].items():",
        "                if ts and isinstance(ts, str):",
        "                    try: temp_starts[c] = datetime.fromisoformat(ts)",
        "                    except ValueError: temp_starts[c] = datetime.now()",
        "                else: temp_starts[c] = datetime.now()",
        "            data['current_status_starts'] = temp_starts",
        "        if 'master_order' not in data or not isinstance(data['master_order'], list): data['master_order'] = []",
        "        return data",
        "    except Exception as e: print(f'Erro ao carregar estado: {e}. Resetando.'); return {}",
        "",
        "# --- Fun√ß√µes de Log e Notifica√ß√£o ---",
        "",
        "def send_chat_notification_internal(consultor, status):",
        "    # Implementation omitted for brevity",
        "    return False",
        "",
        "def play_sound_html():",
        '    return f"""<audio autoplay="true"><source src="{SOUND_URL}" type="audio/mpeg"></audio>"""',
        "",
        "def load_logs():",
        "    try:",
        "        with open(LOG_FILE, 'r') as f: return json.load(f)",
        "    except: return []",
        "",
        "def save_logs(logs):",
        "    with open(LOG_FILE, 'w') as f: json.dump(logs, f, indent=4, default=date_serializer)",
        "",
        "def log_status_change(consultor, old_status, new_status, duration):",
        "    # ... (fun√ß√£o log_status_change como antes) ...",
        "    print(f'LOG: {consultor} de {old_status or 'Dispon√≠vel'} para {new_status or 'Dispon√≠vel'} ap√≥s {duration}')",
        "    logs = load_logs()",
        "    start_time = st.session_state['current_status_starts'].get(consultor, datetime.now())",
        "    log_entry = {",
        "        'consultor': consultor,",
        "        'old_status': old_status if old_status else 'Dispon√≠vel',",
        "        'new_status': new_status if new_status else 'Dispon√≠vel',",
        "        'duration_s': duration.total_seconds() if isinstance(duration, timedelta) else 0,",
        "        'start_time': start_time.isoformat(),",
        "        'end_time': datetime.now().isoformat()",
        "    }",
        "    logs.append(log_entry)",
        "    save_logs(logs)",
        "    st.session_state['current_status_starts'][consultor] = datetime.now()",
        "",
        "def format_time_duration(duration):",
        "    # ... (fun√ß√£o format_time_duration como antes) ...",
        "    if not isinstance(duration, timedelta): return '--:--:--'",
        "    s = int(duration.total_seconds())",
        "    h, s = divmod(s, 3600)",
        "    m, s = divmod(s, 60)",
        "    return f'{h:02}:{m:02}:{s:02}'",
        "",
        "def send_daily_report():",
        "   # Implementation omitted for brevity",
        "   pass",
        "",
        "# --- Inicializa√ß√£o do Session State ---",
        "",
        "def init_session_state():",
        "    # ... (fun√ß√£o init_session_state como antes) ...",
        "    persisted_state = load_state()",
        "    defaults = {",
        "        'status_texto': {nome: '' for nome in CONSULTORES},",
        "        'bastao_queue': [],",
        "        'bastao_start_time': None,",
        "        'current_status_starts': {nome: datetime.now() for nome in CONSULTORES},",
        "        'report_last_run_date': datetime.min,",
        "        'bastao_counts': {nome: 0 for nome in CONSULTORES},",
        "        'priority_return_queue': [],",
        "        'rotation_gif_start_time': None,",
        "        'master_order': [],",
        "        'completed_this_lap': set(),",
        "        'skipped_this_lap': set()",
        "    }",
        "    for key, default_value in defaults.items():",
        "        st.session_state.setdefault(key, persisted_state.get(key, default_value))",
        "",
        "    # Ensure checkbox states align with queue/skipped status initially",
        "    active_people = set(st.session_state.bastao_queue) | st.session_state.skipped_this_lap",
        "    for nome in CONSULTORES:",
        "        checkbox_key = f'check_{nome}'",
        "        is_active_or_status = nome in active_people or bool(st.session_state.status_texto.get(nome))",
        "        st.session_state.setdefault(checkbox_key, is_active_or_status)",
        "        st.session_state.current_status_starts.setdefault(nome, datetime.now())",
        "",
        "    if not os.path.exists(STATE_FILE): save_state()",
        "",
        "# --- Fun√ß√µes de L√≥gica de Ciclo ---",
        "",
        "def check_cycle_reset():",
        "    # ... (fun√ß√£o check_cycle_reset como antes) ...",
        "    master = st.session_state.get('master_order', [])",
        "    skipped = st.session_state.get('skipped_this_lap', set())",
        "    completed = st.session_state.get('completed_this_lap', set())",
        "    should_complete = set()",
        "    for consultor in master:",
        "        if consultor not in skipped and st.session_state.get(f'check_{consultor}', False):",
        "            should_complete.add(consultor)",
        "    print(f'CHECK RESET: Should complete: {should_complete}, Completed: {completed}')",
        "    if should_complete and should_complete.issubset(completed):",
        "        print('--- RESETANDO CICLO ---')",
        "        st.session_state['completed_this_lap'] = set()",
        "        st.session_state['skipped_this_lap'] = set()",
        "        new_bastao_queue = [c for c in master if st.session_state.get(f'check_{c}', False)]",
        "        st.session_state['bastao_queue'] = new_bastao_queue",
        "        print(f'Nova Fila P√≥s-Reset: {new_bastao_queue}')",
        "        return True",
        "    return False",
        "",
        "def check_and_assume_baton():",
        "    # ... (fun√ß√£o check_and_assume_baton como antes) ...",
        "    print('--- CHECK ASSUME BATON ---')",
        "    queue = st.session_state.get('bastao_queue', [])",
        "    skipped = st.session_state.get('skipped_this_lap', set())",
        "    current_holder_from_status = None",
        "    for c, status in st.session_state.status_texto.items():",
        "        if status == 'Bast√£o':",
        "            current_holder_from_status = c",
        "            break",
        "    next_holder = None",
        "    for consultor in queue:",
        "        if consultor not in skipped and st.session_state.get(f'check_{consultor}', False):",
        "            next_holder = consultor",
        "            break",
        "    print(f'Queue: {queue}, Skipped: {skipped}, Found next: {next_holder}, Current holder by status: {current_holder_from_status}')",
        "    if next_holder and next_holder == current_holder_from_status:",
        "        print(f'{next_holder} j√° tem o bast√£o, sem mudan√ßas.')",
        "        return False",
        "    changed = False",
        "    for c in CONSULTORES:",
        "        if c != next_holder and st.session_state.status_texto.get(c) == 'Bast√£o':",
        "            print(f'Limpando bast√£o de {c}')",
        "            old_status = 'Bast√£o'",
        "            duration = datetime.now() - st.session_state['current_status_starts'].get(c, datetime.now())",
        "            if st.session_state.status_texto[c]: log_status_change(c, old_status, '', duration)",
        "            st.session_state.status_texto[c] = ''",
        "            changed = True",
        "    if next_holder and st.session_state.status_texto.get(next_holder) != 'Bast√£o':",
        "        print(f'Atribuindo bast√£o para {next_holder}')",
        "        old_status = st.session_state.status_texto.get(next_holder, '')",
        "        duration = datetime.now() - st.session_state['current_status_starts'].get(next_holder, datetime.now())",
        "        log_status_change(next_holder, old_status, 'Bast√£o', duration)",
        "        st.session_state.status_texto[next_holder] = 'Bast√£o'",
        "        st.session_state.bastao_start_time = datetime.now()",
        "        st.session_state.play_sound = True",
        "        send_chat_notification_internal(next_holder, 'Bast√£o')",
        "        changed = True",
        "    elif not next_holder:",
        "         if st.session_state.bastao_start_time is not None: changed = True",
        "         st.session_state.bastao_start_time = None",
        "    if changed:",
        "        print('Estado do bast√£o mudou, salvando.')",
        "        save_state()",
        "    return changed",
        "",
        "# --- Callbacks ---",
        "",
        "def update_queue(consultor):",
        "    # ... (fun√ß√£o update_queue como antes) ...",
        "    print(f'UPDATE QUEUE: {consultor}')",
        "    st.session_state['gif_warning'] = False",
        "    st.session_state['rotation_gif_start_time'] = None",
        "    checkbox_key = f'check_{consultor}'",
        "    is_checked = st.session_state.get(checkbox_key, False)",
        "    old_status = st.session_state.status_texto.get(consultor, '') or 'Dispon√≠vel'",
        "    duration = datetime.now() - st.session_state.current_status_starts.get(consultor, datetime.now())",
        "    was_holder = consultor == (st.session_state.bastao_queue[0] if st.session_state.bastao_queue else None)",
        "    if is_checked:",
        "        log_status_change(consultor, old_status, '', duration)",
        "        st.session_state.status_texto[consultor] = ''",
        "        if consultor not in st.session_state.master_order: st.session_state.master_order.append(consultor)",
        "        if consultor not in st.session_state.bastao_queue: st.session_state.bastao_queue.append(consultor)",
        "        st.session_state.skipped_this_lap.discard(consultor)",
        "    else:",
        "        log_status_change(consultor, old_status, 'Indispon√≠vel', duration)",
        "        st.session_state.status_texto[consultor] = ''",
        "        if consultor in st.session_state.bastao_queue: st.session_state.bastao_queue.remove(consultor)",
        "        st.session_state.skipped_this_lap.discard(consultor)",
        "        st.session_state.completed_this_lap.discard(consultor)",
        "    print(f' Fila Ativa: {st.session_state.bastao_queue}')",
        "    print(f' Master Order: {st.session_state.master_order}')",
        "    print(f' Skipped: {st.session_state.skipped_this_lap}')",
        "    print(f' Completed: {st.session_state.completed_this_lap}')",
        "    reset_triggered = check_cycle_reset()",
        "    baton_changed = check_and_assume_baton()",
        "    if reset_triggered and not baton_changed: save_state()",
        "    elif not reset_triggered and not baton_changed: save_state()",
        "    st.rerun()",
        "",
        "def rotate_bastao():",
        "    # ... (fun√ß√£o rotate_bastao como antes) ...",
        "    print('ROTATE BASTAO')",
        "    selected = st.session_state.get('consultor_selectbox')",
        "    st.session_state['gif_warning'] = False",
        "    st.session_state['rotation_gif_start_time'] = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione um consultor.'); return",
        "    queue = st.session_state.bastao_queue",
        "    if not queue or selected != queue[0]: st.session_state['gif_warning'] = True; st.rerun(); return",
        "    holder = queue.pop(0)",
        "    queue.append(holder)",
        "    st.session_state.bastao_queue = queue",
        "    duration = datetime.now() - st.session_state.bastao_start_time if st.session_state.bastao_start_time else timedelta(0)",
        "    log_status_change(holder, 'Bast√£o', '', duration)",
        "    st.session_state.status_texto[holder] = ''",
        "    st.session_state.bastao_counts[holder] = st.session_state.bastao_counts.get(holder, 0) + 1",
        "    st.session_state.play_sound = True",
        "    st.session_state.rotation_gif_start_time = datetime.now()",
        "    st.session_state.completed_this_lap.add(holder)",
        "    print(f' Fila Ativa: {st.session_state.bastao_queue}')",
        "    print(f' Master Order: {st.session_state.master_order}')",
        "    print(f' Skipped: {st.session_state.skipped_this_lap}')",
        "    print(f' Completed: {st.session_state.completed_this_lap}')",
        "    reset_triggered = check_cycle_reset()",
        "    check_and_assume_baton()",
        "    st.rerun()",
        "",
        "def skip_turn():",
        "    # ... (fun√ß√£o skip_turn como antes) ...",
        "    print('SKIP TURN')",
        "    selected = st.session_state.get('consultor_selectbox')",
        "    st.session_state['gif_warning'] = False",
        "    st.session_state['rotation_gif_start_time'] = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione um consultor.'); return",
        "    queue = st.session_state.bastao_queue",
        "    if selected not in queue: st.warning(f'{selected} n√£o est√° na fila ativa.'); return",
        "    is_holder = (selected == queue[0]) if queue else False",
        "    queue.remove(selected)",
        "    st.session_state.bastao_queue = queue",
        "    old_status = 'Bast√£o' if is_holder else st.session_state.status_texto.get(selected, '') or 'Dispon√≠vel'",
        "    duration = datetime.now() - st.session_state.current_status_starts.get(selected, datetime.now())",
        "    log_status_change(selected, old_status, 'Pulou Turno', duration)",
        "    st.session_state.status_texto[selected] = ''",
        "    st.session_state.skipped_this_lap.add(selected)",
        "    # Do NOT add to completed_this_lap",
        "    print(f' Fila Ativa: {st.session_state.bastao_queue}')",
        "    print(f' Master Order: {st.session_state.master_order}')",
        "    print(f' Skipped: {st.session_state.skipped_this_lap}')",
        "    print(f' Completed: {st.session_state.completed_this_lap}')",
        "    reset_triggered = check_cycle_reset()",
        "    baton_changed = False",
        "    if is_holder or reset_triggered:",
        "        baton_changed = check_and_assume_baton()",
        "    if reset_triggered and not baton_changed: save_state()",
        "    elif not reset_triggered and not baton_changed: save_state()",
        "    st.rerun()",
        "",
        "def update_status(status_text, change_to_available):",
        "    # ... (fun√ß√£o update_status como antes) ...",
        "    print(f'UPDATE STATUS: {status_text}')",
        "    selected = st.session_state.get('consultor_selectbox')",
        "    st.session_state['gif_warning'] = False",
        "    st.session_state['rotation_gif_start_time'] = None",
        "    if not selected or selected == 'Selecione um nome': st.warning('Selecione um consultor.'); return",
        "    if selected not in st.session_state.status_texto: return",
        "    st.session_state[f'check_{selected}'] = False",
        "    is_holder = selected == (st.session_state.bastao_queue[0] if st.session_state.bastao_queue else None)",
        "    old_status = st.session_state.status_texto.get(selected, '') or ('Bast√£o' if is_holder else 'Dispon√≠vel')",
        "    duration = datetime.now() - st.session_state.current_status_starts.get(selected, datetime.now())",
        "    log_status_change(selected, old_status, status_text, duration)",
        "    st.session_state.status_texto[selected] = status_text",
        "    if selected in st.session_state.bastao_queue: st.session_state.bastao_queue.remove(selected)",
        "    st.session_state.skipped_this_lap.discard(selected)",
        "    st.session_state.completed_this_lap.discard(selected)",
        "    if status_text in STATUS_SAIDA_PRIORIDADE:",
        "        if selected not in st.session_state.priority_return_queue: st.session_state.priority_return_queue.append(selected)",
        "    elif selected in st.session_state.priority_return_queue: st.session_state.priority_return_queue.remove(selected)",
        "    print(f' Fila Ativa: {st.session_state.bastao_queue}')",
        "    print(f' Master Order: {st.session_state.master_order}')",
        "    print(f' Skipped: {st.session_state.skipped_this_lap}')",
        "    print(f' Completed: {st.session_state.completed_this_lap}')",
        "    reset_triggered = check_cycle_reset()",
        "    baton_changed = False",
        "    if is_holder or reset_triggered:",
        "        baton_changed = check_and_assume_baton()",
        "    if reset_triggered and not baton_changed: save_state()",
        "    elif not reset_triggered and not baton_changed: save_state()",
        "    st.rerun()",
        "",
        "# --- IN√çCIO DA APLICA√á√ÉO ---",
        "",
        "# --- ‚¨áÔ∏è MUDAN√áA AQUI (Ordem das Chamadas) ‚¨áÔ∏è ---",
        'st.set_page_config(page_title="Controle Bast√£o Cesupe", layout="wide")',
        "st.markdown('<style>div.stAlert { display: none !important; }</style>', unsafe_allow_html=True)",
        "init_session_state() # Load state AFTER set_page_config",
        "# --- ‚¨ÜÔ∏è MUDAN√áA AQUI ‚¨ÜÔ∏è ---",
        "",
        "st.title(f'Controle Bast√£o Cesupe {BASTAO_EMOJI}')",
        'st.markdown("<hr style=\\"border: 1px solid #E75480;\\">", unsafe_allow_html=True)',
        "",
        "# --- Auto Refresh & Timed Elements ---",
        # ... (l√≥gica do refresh e GIF como antes) ...",
        "gif_start_time = st.session_state.get('rotation_gif_start_time')",
        "show_gif = False",
        "refresh_interval = 30000",
        "if gif_start_time:",
        "    try:",
        "        elapsed = (datetime.now() - gif_start_time).total_seconds()",
        "        if elapsed < 20:",
        "            show_gif = True",
        "            refresh_interval = 5000",
        "        else:",
        "            st.session_state.rotation_gif_start_time = None",
        "    except TypeError: st.session_state.rotation_gif_start_time = None",
        "st_autorefresh(interval=refresh_interval, key='auto_rerun_key')",
        "",
        "if st.session_state.get('play_sound', False):",
        "    st.components.v1.html(play_sound_html(), height=0, width=0)",
        "    st.session_state.play_sound = False",
        "",
        "if show_gif:",
        "    st.image(GIF_URL_ROTATION, width=200, caption='BAST√ÉO GIRADO!')",
        "if st.session_state.get('gif_warning', False):",
        "    st.error('üö´ A√ß√£o inv√°lida! Verifique as regras.')",
        "    st.image(GIF_URL_WARNING, width=150)",
        "",
        "# --- Garantir Assun√ß√£o Inicial do Bast√£o ---",
        "current_holder_from_status = None",
        "for status in st.session_state.status_texto.values():",
        "    if status == 'Bast√£o': current_holder_from_status = True; break",
        "if not current_holder_from_status and st.session_state.bastao_queue:",
        "    print('!!! FOR√áANDO CHECK ASSUME BATON NA INICIALIZA√á√ÉO !!!')",
        "    if check_and_assume_baton():",
        "        # Don't rerun immediately, let the rest of the page load once",
        "        pass # Baton assigned, state saved.",
        "",
        "# --- Layout Principal ---",
        'col_principal, col_disponibilidade = st.columns([1.5, 1])',
        "active_queue = st.session_state.bastao_queue",
        "master = st.session_state.master_order",
        "skipped = st.session_state.skipped_this_lap",
        "responsavel = active_queue[0] if active_queue else ''",
        "proximo_responsavel = active_queue[1] if len(active_queue) > 1 else ''",
        "fila_restante = active_queue[2:]",
        "",
        "with col_principal:",
        "    # ... (Layout da Coluna Principal como antes) ...",
        '    st.header("Respons√°vel pelo Bast√£o")',
        "    col_gif_icon, col_time = st.columns([0.25, 0.75])",
        "    col_gif_icon.image('https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExYjlqeWg3bXpuZ2ltMXdsNXJ6OW13eWF5aXlqYnc1NGNjamFjczlpOSZlcD12MV9pbnRlcm5uYWxfZ2lmX2J5X2lkJmN0PWc/xAFPuHVjmsBmU/giphy.gif', width=50)",
        "    bastao_duration = timedelta()",
        "    if responsavel and st.session_state.bastao_start_time:",
        "        try: bastao_duration = datetime.now() - st.session_state.bastao_start_time",
        "        except: pass",
        "    col_time.markdown(f'#### üïí Tempo: **{format_time_duration(bastao_duration)}**')",
        "    if responsavel:",
        "        st.markdown(f'<span style=\"background-color: #E75480; color: white; padding: 5px 10px; border-radius: 5px; font-size: 2em; font-weight: bold;\">üî• {responsavel}</span>', unsafe_allow_html=True)",
        "    else: st.markdown('## (Ningu√©m na fila ativa)')",
        '    st.markdown("###")',
        '    st.header("Pr√≥ximos da Fila Ativa")',
        "    if proximo_responsavel:",
        "        st.markdown(f'### 1¬∫: **{proximo_responsavel}**')",
        "        if fila_restante:",
        "            st.markdown(f'#### 2¬∫ em diante: {', '.join(fila_restante)}')",
        "    else:",
        "        if responsavel: st.markdown('*Apenas o respons√°vel na fila ativa.*')",
        "        else: st.markdown('*Fila ativa vazia.*')",
        "    if skipped:",
        "        st.markdown(f'<br><span style=\"color:orange;\">üö´ Pulou nesta volta:</span> {', '.join(sorted(list(skipped)))}', unsafe_allow_html=True)",
        '    st.markdown("###")',
        '    st.header("**Consultor**")',
        "    st.selectbox('Selecione:', options=['Selecione um nome'] + CONSULTORES, key='consultor_selectbox', label_visibility='collapsed')",
        '    st.markdown("#### ")',
        '    st.markdown("**A√ß√µes:**")',
        '    col_b1, col_b2, col_b3, col_b4, col_b5 = st.columns(5)',
        "    col_b1.button('üéØ Bast√£o', on_click=rotate_bastao, use_container_width=True, help='Passa o bast√£o para o pr√≥ximo da fila ativa. Apenas o respons√°vel atual pode fazer isso.')",
        "    col_b2.button('‚è≠Ô∏è Pular', on_click=skip_turn, use_container_width=True, help='Sai da fila ativa *nesta volta*. Volta automaticamente no pr√≥ximo ciclo. Qualquer um na fila ativa pode pular.')",
        "    col_b3.button('‚úèÔ∏è Atividade', on_click=update_status, args=('Atividade', False,), use_container_width=True)",
        "    col_b4.button('üçΩÔ∏è Almo√ßo', on_click=update_status, args=('Almo√ßo', False,), use_container_width=True)",
        "    col_b5.button('üö∂ Sa√≠da', on_click=update_status, args=('Sa√≠da Tempor√°ria', False,), use_container_width=True)",
        '    st.markdown("####")',
        "    st.button('üîÑ Atualizar (Manual)', on_click=manual_rerun, use_container_width=True)",
        '    st.markdown("---")',
        "",
        "with col_disponibilidade:",
        "    # ... (Layout da Coluna Disponibilidade como antes) ...",
        "    st.header('Status dos Consultores')",
        "    st.markdown('Marque/Desmarque para entrar/sair da fila ativa.')",
        "    list_na_fila_ui = []",
        "    list_atividade_ui = []",
        "    list_almoco_ui = []",
        "    list_saida_ui = []",
        "    list_indisponivel_ui = []",
        "    for nome in CONSULTORES:",
        "        is_checked = st.session_state.get(f'check_{nome}', False)",
        "        status = st.session_state.status_texto.get(nome, '')",
        "        if is_checked: list_na_fila_ui.append(nome)",
        "        elif status == 'Atividade': list_atividade_ui.append(nome)",
        "        elif status == 'Almo√ßo': list_almoco_ui.append(nome)",
        "        elif status == 'Sa√≠da Tempor√°ria': list_saida_ui.append(nome)",
        "        else: list_indisponivel_ui.append(nome)",
        "    st.subheader(f'‚úÖ Na Fila ({len(list_na_fila_ui)})')",
        "    nomes_renderizados = 0",
        "    if master:",
        "        for nome in master:",
        "            if nome in list_na_fila_ui:",
        "                nomes_renderizados += 1",
        "                col_nome, col_check = st.columns([0.8, 0.2])",
        "                checkbox_key = f'check_{nome}'",
        "                col_check.checkbox(' ', key=checkbox_key, on_change=update_queue, args=(nome,), label_visibility='collapsed')",
        "                if nome == responsavel:",
        "                    display = f'<span style=\"background-color: #E75480; color: white; padding: 2px 6px; border-radius: 5px; font-weight: bold;\">üî• {nome}</span>'",
        "                elif nome in skipped:",
        "                    display = f'**{nome}** :orange-background[Pulou]'",
        "                elif nome in active_queue:",
        "                    display = f'**{nome}** :blue-background[Na Fila]'",
        "                else:",
        "                    display = f'**{nome}** :grey-background[Dispon√≠vel]'",
        "                col_nome.markdown(display, unsafe_allow_html=True)",
        "    if nomes_renderizados == 0: st.markdown('_Ningu√©m dispon√≠vel na fila._')",
        "    st.markdown('---')",
        "    def render_section(title, icon, names, tag_color):",
        "        st.subheader(f'{icon} {title} ({len(names)})')",
        "        if not names: st.markdown(f'_Ningu√©m em {title.lower()}._')",
        "        else:",
        "            for nome in sorted(names):",
        "                col_nome, col_check = st.columns([0.8, 0.2])",
        "                key = f'check_{nome}'",
        "                col_check.checkbox(' ', key=key, on_change=update_queue, args=(nome,), label_visibility='collapsed')",
        "                col_nome.markdown(f'**{nome}** :{tag_color}-background[{title}]', unsafe_allow_html=True)",
        "        st.markdown('---')",
        "    render_section('Atividade', '‚úèÔ∏è', list_atividade_ui, 'yellow')",
        "    render_section('Almo√ßo', 'üçΩÔ∏è', list_almoco_ui, 'blue')",
        "    render_section('Sa√≠da', 'üö∂', list_saida_ui, 'red')",
        "    render_section('Indispon√≠vel', '‚ùå', list_indisponivel_ui, 'grey')",
        "    current_hour = datetime.now().hour",
        "    today = datetime.now().date()",
        "    last_run = st.session_state.report_last_run_date.date() if isinstance(st.session_state.report_last_run_date, datetime) else datetime.min.date()",
        "    if current_hour >= 20 and today > last_run:",
        "        send_daily_report()",
        "",
        "" # Linha final vazia
    ]
    # Remove initial empty lines and ensure final newline
    clean_lines = [line for i, line in enumerate(app_code_lines) if line.strip() or i > 0]
    return "\n".join(clean_lines)


# --- Execu√ß√£o ---
app_code_final = generate_app_code(
    CONSULTORES, BASTAO_EMOJI, GOOGLE_CHAT_WEBHOOK_RELATORIO, CHAT_WEBHOOK_BASTAO, APP_URL_CLOUD
)
exec(app_code_final)
